From 50f78b4d15aba9c457c08744243f380116840437 Mon Sep 17 00:00:00 2001
From: Vladislav Nepogodin <nepogodin.vlad@gmail.com>
Date: Wed, 8 Jun 2022 03:37:55 +0400
Subject: [PATCH] fs: add zstd for zfs

Add basic support based on zstd examples
https://github.com/facebook/zstd/tree/dev/examples

Signed-off-by: Vladislav Nepogodin <nepogodin.vlad@gmail.com>
---
 Makefile.util.def           |   1 +
 grub-core/Makefile.core.def |   1 +
 grub-core/fs/zfs/zfs.c      |   5 +-
 grub-core/fs/zfs/zfs_zstd.c | 303 ++++++++++++++++++++++++++++++++++++
 include/grub/zfs/zio.h      |   1 +
 5 files changed, 310 insertions(+), 1 deletion(-)
 create mode 100644 grub-core/fs/zfs/zfs_zstd.c

diff --git a/Makefile.util.def b/Makefile.util.def
index d919c562c..40017a50e 100644
--- a/Makefile.util.def
+++ b/Makefile.util.def
@@ -132,6 +132,7 @@ library = {
   common = grub-core/fs/zfs/zfsinfo.c;
   common = grub-core/fs/zfs/zfs_lzjb.c;
   common = grub-core/fs/zfs/zfs_lz4.c;
+  common = grub-core/fs/zfs/zfs_zstd.c;
   common = grub-core/fs/zfs/zfs_sha256.c;
   common = grub-core/fs/zfs/zfs_fletcher.c;
   common = grub-core/lib/envblk.c;
diff --git a/grub-core/Makefile.core.def b/grub-core/Makefile.core.def
index 715994872..c4e625383 100644
--- a/grub-core/Makefile.core.def
+++ b/grub-core/Makefile.core.def
@@ -1554,6 +1554,7 @@ module = {
   common = fs/zfs/zfs.c;
   common = fs/zfs/zfs_lzjb.c;
   common = fs/zfs/zfs_lz4.c;
+  common = fs/zfs/zfs_zstd.c;
   common = fs/zfs/zfs_sha256.c;
   common = fs/zfs/zfs_fletcher.c;
 };
diff --git a/grub-core/fs/zfs/zfs.c b/grub-core/fs/zfs/zfs.c
index ffa0e5863..361e5f6b8 100644
--- a/grub-core/fs/zfs/zfs.c
+++ b/grub-core/fs/zfs/zfs.c
@@ -158,13 +158,15 @@ ZAP_LEAF_ENTRY(zap_leaf_phys_t *l, int bs, int idx)
 
 
 /*
- * Decompression Entry - lzjb & lz4
+ * Decompression Entry - lzjb & lz4 & zstd
  */
 
 extern grub_err_t lzjb_decompress (void *, void *, grub_size_t, grub_size_t);
 
 extern grub_err_t lz4_decompress (void *, void *, grub_size_t, grub_size_t);
 
+extern grub_err_t zstd_decompress (void *, void *, grub_size_t, grub_size_t);
+
 typedef grub_err_t zfs_decomp_func_t (void *s_start, void *d_start,
 				      grub_size_t s_len, grub_size_t d_len);
 typedef struct decomp_entry
@@ -360,6 +362,7 @@ static decomp_entry_t decomp_table[ZIO_COMPRESS_FUNCTIONS] = {
   {"gzip-9", zlib_decompress},  /* ZIO_COMPRESS_GZIP9 */
   {"zle", zle_decompress},      /* ZIO_COMPRESS_ZLE   */
   {"lz4", lz4_decompress},      /* ZIO_COMPRESS_LZ4   */
+  {"zstd", zstd_decompress},      /* ZIO_COMPRESS_ZSTD   */
 };
 
 static grub_err_t zio_read_data (blkptr_t * bp, grub_zfs_endian_t endian,
diff --git a/grub-core/fs/zfs/zfs_zstd.c b/grub-core/fs/zfs/zfs_zstd.c
new file mode 100644
index 000000000..97708a910
--- /dev/null
+++ b/grub-core/fs/zfs/zfs_zstd.c
@@ -0,0 +1,303 @@
+/*
+ * ZSTD - Fast real-time compression algorithm
+ * Header File
+ * Copyright (C) 2022 Vladislav Nepogodin.
+ * GPLv2 License (https://www.opensource.org/licenses/GPL-2.0.php)
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ */
+
+/*
+ * Tell zstd to expose functions that aren't part of the stable API, which
+ * aren't safe to use when linking against a dynamic library. We vendor in a
+ * specific zstd version, so we know what we're getting. We need these unstable
+ * functions to provide our own allocator, which uses grub_malloc(), to zstd.
+ */
+#define ZSTD_STATIC_LINKING_ONLY
+
+#include <grub/err.h>
+#include <grub/mm.h>
+#include <grub/misc.h>
+#include <grub/types.h>
+#include <zstd.h>
+
+#define ZSTD_ZFS_MAX_WINDOWLOG 10
+#define ZSTD_ZFS_MAX_INPUT     (1 << ZSTD_ZFS_MAX_WINDOWLOG)
+
+enum zio_zstd_levels {
+	ZIO_ZSTD_LEVEL_INHERIT = 0,
+	ZIO_ZSTD_LEVEL_1,
+#define	ZIO_ZSTD_LEVEL_MIN	ZIO_ZSTD_LEVEL_1
+	ZIO_ZSTD_LEVEL_2,
+	ZIO_ZSTD_LEVEL_3,
+#define	ZIO_ZSTD_LEVEL_DEFAULT	ZIO_ZSTD_LEVEL_3
+	ZIO_ZSTD_LEVEL_4,
+	ZIO_ZSTD_LEVEL_5,
+	ZIO_ZSTD_LEVEL_6,
+	ZIO_ZSTD_LEVEL_7,
+	ZIO_ZSTD_LEVEL_8,
+	ZIO_ZSTD_LEVEL_9,
+	ZIO_ZSTD_LEVEL_10,
+	ZIO_ZSTD_LEVEL_11,
+	ZIO_ZSTD_LEVEL_12,
+	ZIO_ZSTD_LEVEL_13,
+	ZIO_ZSTD_LEVEL_14,
+	ZIO_ZSTD_LEVEL_15,
+	ZIO_ZSTD_LEVEL_16,
+	ZIO_ZSTD_LEVEL_17,
+	ZIO_ZSTD_LEVEL_18,
+	ZIO_ZSTD_LEVEL_19,
+#define	ZIO_ZSTD_LEVEL_MAX	ZIO_ZSTD_LEVEL_19
+	ZIO_ZSTD_LEVEL_RESERVE = 101, /* Leave room for new positive levels */
+	ZIO_ZSTD_LEVEL_FAST, /* Fast levels are negative */
+	ZIO_ZSTD_LEVEL_FAST_1,
+#define	ZIO_ZSTD_LEVEL_FAST_DEFAULT	ZIO_ZSTD_LEVEL_FAST_1
+	ZIO_ZSTD_LEVEL_FAST_2,
+	ZIO_ZSTD_LEVEL_FAST_3,
+	ZIO_ZSTD_LEVEL_FAST_4,
+	ZIO_ZSTD_LEVEL_FAST_5,
+	ZIO_ZSTD_LEVEL_FAST_6,
+	ZIO_ZSTD_LEVEL_FAST_7,
+	ZIO_ZSTD_LEVEL_FAST_8,
+	ZIO_ZSTD_LEVEL_FAST_9,
+	ZIO_ZSTD_LEVEL_FAST_10,
+	ZIO_ZSTD_LEVEL_FAST_20,
+	ZIO_ZSTD_LEVEL_FAST_30,
+	ZIO_ZSTD_LEVEL_FAST_40,
+	ZIO_ZSTD_LEVEL_FAST_50,
+	ZIO_ZSTD_LEVEL_FAST_60,
+	ZIO_ZSTD_LEVEL_FAST_70,
+	ZIO_ZSTD_LEVEL_FAST_80,
+	ZIO_ZSTD_LEVEL_FAST_90,
+	ZIO_ZSTD_LEVEL_FAST_100,
+	ZIO_ZSTD_LEVEL_FAST_500,
+	ZIO_ZSTD_LEVEL_FAST_1000,
+#define	ZIO_ZSTD_LEVEL_FAST_MAX	ZIO_ZSTD_LEVEL_FAST_1000
+	ZIO_ZSTD_LEVEL_AUTO = 251, /* Reserved for future use */
+	ZIO_ZSTD_LEVEL_LEVELS
+};
+
+struct levelmap {
+	grub_int16_t cookie;
+	enum zio_zstd_levels level;
+} GRUB_PACKED;
+
+
+/* Level map for converting ZFS internal levels to ZSTD levels and vice versa */
+static struct levelmap zstd_levels[] = {
+	{ZIO_ZSTD_LEVEL_1, ZIO_ZSTD_LEVEL_1},
+	{ZIO_ZSTD_LEVEL_2, ZIO_ZSTD_LEVEL_2},
+	{ZIO_ZSTD_LEVEL_3, ZIO_ZSTD_LEVEL_3},
+	{ZIO_ZSTD_LEVEL_4, ZIO_ZSTD_LEVEL_4},
+	{ZIO_ZSTD_LEVEL_5, ZIO_ZSTD_LEVEL_5},
+	{ZIO_ZSTD_LEVEL_6, ZIO_ZSTD_LEVEL_6},
+	{ZIO_ZSTD_LEVEL_7, ZIO_ZSTD_LEVEL_7},
+	{ZIO_ZSTD_LEVEL_8, ZIO_ZSTD_LEVEL_8},
+	{ZIO_ZSTD_LEVEL_9, ZIO_ZSTD_LEVEL_9},
+	{ZIO_ZSTD_LEVEL_10, ZIO_ZSTD_LEVEL_10},
+	{ZIO_ZSTD_LEVEL_11, ZIO_ZSTD_LEVEL_11},
+	{ZIO_ZSTD_LEVEL_12, ZIO_ZSTD_LEVEL_12},
+	{ZIO_ZSTD_LEVEL_13, ZIO_ZSTD_LEVEL_13},
+	{ZIO_ZSTD_LEVEL_14, ZIO_ZSTD_LEVEL_14},
+	{ZIO_ZSTD_LEVEL_15, ZIO_ZSTD_LEVEL_15},
+	{ZIO_ZSTD_LEVEL_16, ZIO_ZSTD_LEVEL_16},
+	{ZIO_ZSTD_LEVEL_17, ZIO_ZSTD_LEVEL_17},
+	{ZIO_ZSTD_LEVEL_18, ZIO_ZSTD_LEVEL_18},
+	{ZIO_ZSTD_LEVEL_19, ZIO_ZSTD_LEVEL_19},
+	{-1, ZIO_ZSTD_LEVEL_FAST_1},
+	{-2, ZIO_ZSTD_LEVEL_FAST_2},
+	{-3, ZIO_ZSTD_LEVEL_FAST_3},
+	{-4, ZIO_ZSTD_LEVEL_FAST_4},
+	{-5, ZIO_ZSTD_LEVEL_FAST_5},
+	{-6, ZIO_ZSTD_LEVEL_FAST_6},
+	{-7, ZIO_ZSTD_LEVEL_FAST_7},
+	{-8, ZIO_ZSTD_LEVEL_FAST_8},
+	{-9, ZIO_ZSTD_LEVEL_FAST_9},
+	{-10, ZIO_ZSTD_LEVEL_FAST_10},
+	{-20, ZIO_ZSTD_LEVEL_FAST_20},
+	{-30, ZIO_ZSTD_LEVEL_FAST_30},
+	{-40, ZIO_ZSTD_LEVEL_FAST_40},
+	{-50, ZIO_ZSTD_LEVEL_FAST_50},
+	{-60, ZIO_ZSTD_LEVEL_FAST_60},
+	{-70, ZIO_ZSTD_LEVEL_FAST_70},
+	{-80, ZIO_ZSTD_LEVEL_FAST_80},
+	{-90, ZIO_ZSTD_LEVEL_FAST_90},
+	{-100, ZIO_ZSTD_LEVEL_FAST_100},
+	{-500, ZIO_ZSTD_LEVEL_FAST_500},
+	{-1000, ZIO_ZSTD_LEVEL_FAST_1000},
+};
+
+
+static int
+zstd_enum_to_cookie(enum zio_zstd_levels level, grub_int16_t *cookie)
+{
+	for (unsigned int i = 0; i < ARRAY_SIZE(zstd_levels); i++) {
+		if (zstd_levels[i].level == level) {
+			*cookie = zstd_levels[i].cookie;
+			return (0);
+		}
+	}
+
+	/* Invalid/unknown ZSTD level - this should never happen. */
+	return (1);
+}
+
+static void *grub_zstd_malloc (void *state __attribute__((unused)), size_t size)
+{
+  return grub_malloc (size);
+}
+
+static void grub_zstd_free (void *state __attribute__((unused)), void *address)
+{
+  return grub_free (address);
+}
+
+static ZSTD_customMem grub_zstd_allocator (void)
+{
+  ZSTD_customMem allocator;
+
+  allocator.customAlloc = &grub_zstd_malloc;
+  allocator.customFree = &grub_zstd_free;
+  allocator.opaque = NULL;
+
+  return allocator;
+}
+
+typedef struct {
+	grub_uint32_t version:24;
+	grub_uint8_t level;
+} version_level_t;
+
+/* NOTE: all fields in this header are in big endian order */
+struct zstd_header {
+	/* contains compressed size */
+	grub_uint32_t size;
+	/*
+	 * contains the version and level
+	 * we have to choose a union here to handle
+	 * endian conversation since the version and level
+	 * is bitmask encoded.
+	 */
+	union {
+		grub_uint32_t version_data;
+		version_level_t version_level;
+	};
+	char data[];
+} GRUB_PACKED;
+
+/* Decompression functions */
+grub_err_t
+zstd_decompress(void *s_start, void *d_start, grub_size_t s_len, grub_size_t d_len);
+
+grub_err_t
+zstd_decompress(void *s_start, void *d_start, grub_size_t s_len, grub_size_t d_len)
+{
+    const struct zstd_header *hdr = (const struct zstd_header *)s_start;
+    size_t result;
+	grub_uint32_t bufsize;
+	grub_uint8_t zstdlevel;
+	grub_uint32_t version;
+	grub_int16_t levelcookie;
+
+    void *allocated = NULL;
+    char *otmpbuf = (char*)d_start;
+    grub_size_t otmpsize = d_len;
+    ZSTD_DCtx *dctx = NULL;
+    grub_size_t zstd_ret;
+    grub_ssize_t ret = -1;
+
+    struct zstd_header hdr_copy;
+    hdr_copy.version_data = grub_be_to_cpu32(hdr->version_data);
+    /* Read buffer size */
+    bufsize = grub_be_to_cpu32(hdr->size);
+    grub_printf ("DEBUG: buffer size = %x", bufsize);
+
+    /* Read the level */
+    zstdlevel = hdr_copy.version_level.level;
+    grub_printf ("DEBUG: zstdlevel = %x", zstdlevel);
+
+    /*
+	 * We ignore the ZSTD version for now. As soon as incompatibilities
+	 * occurr, it has to be read and handled accordingly.
+	 */
+    version = hdr_copy.version_level.version;
+    grub_printf ("DEBUG: zstd version = %x", version);
+
+    /*
+	 * Convert and check the level
+	 * An invalid level is a strong indicator for data corruption! In such
+	 * case return an error so the upper layers can try to fix it.
+	 */
+    if (zstd_enum_to_cookie(zstdlevel, &levelcookie)) {
+		return grub_error (GRUB_ERR_BAD_FS, "zstd decompression failed");
+	}
+
+    if (bufsize + sizeof (*hdr) > s_len) {
+		return grub_error (GRUB_ERR_BAD_FS, "zstd decompression failed");
+	}
+
+    /*
+     * Zstd will fail if it can't fit the entire output in the destination
+     * buffer, so if osize isn't large enough, allocate a temporary buffer.
+     */
+    if (otmpsize < ZSTD_ZFS_MAX_INPUT) {
+       allocated = grub_malloc (ZSTD_ZFS_MAX_INPUT);
+       if (!allocated) {
+	      grub_error (GRUB_ERR_OUT_OF_MEMORY, "failed allocate a zstd buffer");
+	      goto err;
+	   }
+       otmpbuf = (char *) allocated;
+       otmpsize = ZSTD_ZFS_MAX_INPUT;
+    }
+
+    /* Create the ZSTD_DCtx. */
+    dctx = ZSTD_createDCtx_advanced (grub_zstd_allocator ());
+    if (!dctx) {
+        /* ZSTD_createDCtx_advanced() only fails if it is out of memory. */
+        grub_error (GRUB_ERR_OUT_OF_MEMORY, "failed to create a zstd context");
+        goto err;
+    }
+
+    /*
+     * Get the real input size, there may be junk at the
+     * end of the frame.
+     */
+    bufsize = ZSTD_findFrameCompressedSize (hdr->data, bufsize);
+    if (ZSTD_isError (bufsize)) {
+        grub_error (GRUB_ERR_BAD_COMPRESSED_DATA, "zstd data corrupted");
+        goto err;
+    }
+
+    /* Decompress and check for errors. */
+    zstd_ret = ZSTD_decompressDCtx (dctx, otmpbuf, otmpsize, hdr->data, bufsize);
+    if (ZSTD_isError (zstd_ret)) {
+        grub_error (GRUB_ERR_BAD_COMPRESSED_DATA, "zstd data corrupted");
+        goto err;
+    }
+
+    /*
+     * Move the requested data into the obuf. obuf may be equal
+     * to otmpbuf, which is why grub_memmove() is required.
+     */
+    grub_memmove (d_start, otmpbuf, d_len);
+    ret = d_len;
+
+err:
+    grub_free (allocated);
+    ZSTD_freeDCtx (dctx);
+
+    return ret;
+}
diff --git a/include/grub/zfs/zio.h b/include/grub/zfs/zio.h
index 19ce136bb..997b0c4d4 100644
--- a/include/grub/zfs/zio.h
+++ b/include/grub/zfs/zio.h
@@ -89,6 +89,7 @@ enum zio_compress {
 	ZIO_COMPRESS_GZIP9,
 	ZIO_COMPRESS_ZLE,
 	ZIO_COMPRESS_LZ4,
+	ZIO_COMPRESS_ZSTD,
 	ZIO_COMPRESS_FUNCTIONS
 };
 
-- 
2.36.1

